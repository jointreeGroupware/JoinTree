<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.goodee.JoinTree.mapper.CommuteManageMapper">

	<!-- 검색 조건별 행의 수 (연차 목록) -->
	<select id="searchAnnualLeaveListCnt"
			parameterType="java.util.Map" resultType="int">
		SELECT 
			COUNT(*) 
		FROM emp_info e
		LEFT OUTER JOIN account_list alist ON e.emp_no = alist.emp_no
 		WHERE 
 			1=1
 			AND alist.active = 'A0101'
 			<if test="empNo != null and empNo != 0">
		        AND emp_no = #{empNo}
		    </if>
		    <if test="empName != null and empName != ''">
		        AND emp_name = #{empName}
		    </if>
		    <if test="dept != null and dept != ''">
		        AND dept = #{dept}
		    </if>
	</select>
	
	<!-- 사원 연차 목록 조회 -->
	<select id="searchAnnualLeaveList"
			parameterType="java.util.Map" resultType="java.util.Map">
		SELECT 
		    e.emp_no empNo, 
		    e.emp_name empName, 
		    dc.code_name dept, 
		    COALESCE(SUM(al.add_annual_count), 0) - COALESCE(SUM(al.take_annual_count), 0) annualCount,
		    <![CDATA[
		    -- 근속 연수
			 YEAR(NOW()) - YEAR(e.emp_hire_date) - 
		    CASE 
		        WHEN MONTH(NOW()) < MONTH(e.emp_hire_date) OR 
		             (MONTH(NOW()) = MONTH(e.emp_hire_date) AND DAY(NOW()) < DAY(e.emp_hire_date)) 
		        THEN 1 
		        ELSE 0 
		    END workYears,
		    
		    -- 근속 개월수
			 MONTH(NOW()) - MONTH(e.emp_hire_date) + 
		    CASE 
		        WHEN MONTH(NOW()) < MONTH(e.emp_hire_date) OR 
		             (MONTH(NOW()) = MONTH(e.emp_hire_date) AND DAY(NOW()) < DAY(e.emp_hire_date)) 
		        THEN 12 
		        ELSE 0 
		    END workMonths,
		    ]]>	
			( -- 첫 달 근로 시간
		        SELECT TIME_FORMAT(SEC_TO_TIME(SUM(TIME_TO_SEC(c.emp_off_time) - TIME_TO_SEC(c.emp_on_time))), '%H:%i:%s') 
		        FROM emp_info e2
		        LEFT OUTER JOIN commute c ON e2.emp_no = c.emp_no
		        WHERE 
		            c.emp_on_off_date BETWEEN e2.emp_hire_date AND DATE_ADD(e2.emp_hire_date, INTERVAL 1 MONTH)
		            AND e2.emp_no = e.emp_no
		        GROUP BY e2.emp_no
		    ) totalFirstMonthWorkTime,
		    
		    ( -- 한달 근로 시간
		        SELECT TIME_FORMAT(SEC_TO_TIME(SUM(TIME_TO_SEC(c.emp_off_time) - TIME_TO_SEC(c.emp_on_time))), '%H:%i:%s') 
		        FROM emp_info e3
		        LEFT OUTER JOIN commute c ON e3.emp_no = c.emp_no
		        WHERE 
		            c.emp_on_off_date BETWEEN 
		                (SELECT MAX(add_annual_date) FROM annual_leave) 
		                AND DATE_ADD((SELECT MAX(add_annual_date) FROM annual_leave), INTERVAL 1 MONTH)
		            AND e3.emp_no = e.emp_no
		        GROUP BY e3.emp_no
		    ) totalMonthWorkTime,
		    
		    ( -- 첫 해 1년 근로 시간
		        SELECT TIME_FORMAT(SEC_TO_TIME(SUM(TIME_TO_SEC(c.emp_off_time) - TIME_TO_SEC(c.emp_on_time))), '%H:%i:%s') 
		        FROM emp_info e4
		        LEFT OUTER JOIN commute c ON e4.emp_no = c.emp_no
		        WHERE 
		            c.emp_on_off_date BETWEEN e4.emp_hire_date AND DATE_ADD(e4.emp_hire_date, INTERVAL 1 YEAR)
		            AND e4.emp_no = e.emp_no
		        GROUP BY e4.emp_no
		    ) totalFristYearWorkTime,
		    
		    ( -- 1년 근로 시간
		        SELECT TIME_FORMAT(SEC_TO_TIME(SUM(TIME_TO_SEC(c.emp_off_time) - TIME_TO_SEC(c.emp_on_time))), '%H:%i:%s') 
		        FROM emp_info e5
		        LEFT OUTER JOIN commute c ON e5.emp_no = c.emp_no
		        WHERE 
		            c.emp_on_off_date BETWEEN 
		                (SELECT MAX(add_annual_date) FROM annual_leave) 
		                AND DATE_ADD((SELECT MAX(add_annual_date) FROM annual_leave), INTERVAL 1 YEAR)
		            AND e5.emp_no = e.emp_no
		        GROUP BY e5.emp_no
		    ) totalYearWorkTime,
		     
		    ( -- 첫 달 평일 근로 소정 시간
			    SELECT 
			        TIME_FORMAT(
			            SEC_TO_TIME(
			                (DATEDIFF(
			                    DATE_ADD(e.emp_hire_date, INTERVAL 1 MONTH),  
			                    e.emp_hire_date  -- 입사일
			                ) - (DATEDIFF(
			                    DATE_ADD(e.emp_hire_date, INTERVAL 1 MONTH),  
			                    e.emp_hire_date  
			                ) DIV 7 * 2)) * 3600 * 8
			            ), '%H:%i:%s'
			        ) workTimeInOneFirstMonth
			) workTimeInOneFirstMonth,
		    
		    ( -- 1달 평일 근로 소정 시간
		        
		        SELECT 
		            TIME_FORMAT(
							SEC_TO_TIME(
			                (DATEDIFF(
			                    DATE_ADD(
			                        (SELECT MAX(add_annual_date) FROM annual_leave WHERE emp_no = e.emp_no),
			                        INTERVAL 1 MONTH
			                    ),
			                    (SELECT MAX(add_annual_date) FROM annual_leave WHERE emp_no = e.emp_no) 
			                ) - (DATEDIFF(
			                    DATE_ADD(
			                        (SELECT MAX(add_annual_date) FROM annual_leave WHERE emp_no = e.emp_no),
			                        INTERVAL 1 MONTH
			                    ), 
			                    (SELECT MAX(add_annual_date) FROM annual_leave WHERE emp_no = e.emp_no)  
			                ) DIV 7 * 2)) * 3600 * 8
		                ), '%H:%i:%s'
		            ) workTimeInOneMonth
		    ) workTimeInOneMonth,
		    
			( -- 1년 평일 근로 소정 시간
		    SELECT 
		        TIME_FORMAT(
					  SEC_TO_TIME(
				          (DATEDIFF(
				              DATE_ADD(e.emp_hire_date, INTERVAL 1 YEAR), 
				              e.emp_hire_date 
				          ) - (DATEDIFF(
				              DATE_ADD(e.emp_hire_date, INTERVAL 1 YEAR), 
				              e.emp_hire_date  
				          ) DIV 7 * 2)) * 3600 * 8
						 ), '%H:%i:%s'            
		        ) workTimeInYear
			) workTimeInYear,
			
			-- 입사한지 한 달 후의 날짜
		    DATE_ADD(e.emp_hire_date, INTERVAL 1 MONTH) oneMonthAfterHireDate,
		    
		    -- 마지막 연차 지급일 부터의 한 달 후의 날짜
		    DATE_ADD(al.add_annual_date, INTERVAL 1 MONTH) oneMonthAfterAddAnnualDate,
		    
		    -- 입사한지 1년 후의 날짜
		    DATE_ADD(e.emp_hire_date, INTERVAL 1 YEAR) oneYearAfterHireDate,
		    
		    -- 마지막 연차 지급일 부터의 1년 후의 날짜
		    DATE_ADD(al.add_annual_date, INTERVAL 1 YEAR) oneYearAfterAddAnnualDate		 
		FROM emp_info e 
		LEFT OUTER JOIN annual_leave al ON e.emp_no = al.emp_no
		LEFT OUTER JOIN account_list alist ON e.emp_no = alist.emp_no
		INNER JOIN common_code dc ON e.dept = dc.code
		WHERE
			1=1
			AND alist.active = 'A0101'
			<if test="empNo !=null and empNo != 0">
		    	AND e.emp_no = #{empNo}
		    </if>
		    <if test="empName != null and empName != ''">
		    	AND e.emp_name = #{empName}
		    </if>
		    <if test="dept != null and dept != ''">
		     	AND dc.code = #{dept}
		    </if>
		GROUP BY e.emp_no     
		ORDER BY e.emp_no ASC
		LIMIT #{beginRow}, #{rowPerPage}
		    
	</select>
	
	<!-- 검색 조건별 행의 수 (연가 목록) -->
	<select id="searchLeaveRecodeListCnt"
			parameterType="java.util.Map" resultType="int">
		SELECT 
			count(*)
		FROM leave_recode lr
		LEFT OUTER JOIN emp_info ei ON lr.emp_no = ei.emp_no
		LEFT OUTER JOIN account_list al ON lr.emp_no = al.emp_no
		WHERE
			1=1
			AND al.active = 'A0101'
			<if test="empNo !=null and empNo != 0">
		    	AND lr.emp_no = #{empNo}
		    </if>
		 	<if test="empName != null and empName != ''">
		    	AND ei.emp_name = #{empName}
		    </if>
		    <if test="leaveType != null and leaveType != ''">
		    	AND lr.leave_type = #{leaveType}
		    </if>
		    <if test="year != null and year != ''">
		    	AND YEAR(lr.leave_start_date) = #{year}
		    </if>
		    <if test="startDate != null and endDate != null 
		    			and startDate != '' and endDate != ''">
		    	AND lr.leave_start_date BETWEEN #{startDate} AND #{endDate}
		    </if>
		    <if test="active != null and active != ''">
		    	AND al.active = #{active}
		    </if>
	</select>
	
	<!-- 사원 연가 목록 조회 -->
	<select id="searchLeaveRecodeList"
			parameterType="java.util.Map" resultType="java.util.Map">
		SELECT 
			lr.emp_no empNo,
			dc.code_name dept,
			ei.emp_name empName,
			lc.code_name leaveType, 
			lr.leave_start_date startDate,
			lr.leave_end_date endDate,
			lr.leave_period_date leavePeriodDate,
			ac.code_name active
		FROM leave_recode lr
		LEFT OUTER JOIN emp_info ei ON lr.emp_no = ei.emp_no
		LEFT OUTER JOIN account_list al ON lr.emp_no = al.emp_no
		INNER JOIN common_code ac ON al.active = ac.code
		INNER JOIN common_code lc ON  lr.leave_type = lc.code
		INNER JOIN common_code dc ON ei.dept = dc.code
		WHERE
			1=1
			AND al.active = 'A0101'
			<if test="empNo !=null and empNo != 0">
		    	AND lr.emp_no = #{empNo}
		    </if>
		 	<if test="empName != null and empName != ''">
		    	AND ei.emp_name = #{empName}
		    </if>
		    <if test="leaveType != null and leaveType != ''">
		    	AND lr.leave_type = #{leaveType}
		    </if>
		    <if test="year != null and year != ''">
		    	AND YEAR(lr.leave_start_date) = #{year}
		    </if>
		    <if test="startDate != null and endDate != null 
		    			and startDate != '' and endDate != ''">
		    	AND lr.leave_start_date BETWEEN #{startDate} AND #{endDate}
		    </if>
		    <if test="active != null and active != ''">
		    	AND al.active = #{active}
		    </if>
		ORDER BY lr.createdate DESC
		LIMIT #{beginRow}, #{rowPerPage}  
	</select>
	
	<!-- 검색 조건별 행의 수 (출퇴근 목록) -->
	<select id="searchCommuteFullListCnt"
			parameterType="java.util.Map" resultType="int">
		
		SELECT 
			COUNT(*)
		FROM commute c
		LEFT OUTER JOIN emp_info e ON c.emp_no = e.emp_no
		LEFT OUTER JOIN account_list al ON e.emp_no = al.emp_no
		WHERE
			1=1
			AND al.active = 'A0101'
			<if test="empNo !=null and empNo != 0">
		    	AND e.emp_no = #{empNo}
		    </if>
		 	<if test="empName != null and empName != ''">
		    	AND e.emp_name = #{empName}
		    </if>
		    <if test="dept != null and dept != ''">
		     	AND dc.code = #{dept}
		    </if>
		    <if test="year != null and year != ''">
		    	AND YEAR(c.emp_on_off_date) = #{year}
		    </if>
		    <if test="startDate != null and endDate != null 
		    			and startDate != '' and endDate != ''">
		    	AND c.emp_on_off_date BETWEEN #{startDate} AND #{endDate}
		    </if>
	</select>
	
	<!-- 전체사원 출퇴근 목록 조회 -->
	<select id="searchCommuteFullList"
			parameterType="java.util.Map" resultType="java.util.Map">
		SELECT 
			e.emp_no empNo, 
			e.emp_name empName, 
			dc.code_name dept, 
			c.emp_on_off_date empOnOffDate, 
			c.emp_on_time empOnTime, 
			c.emp_off_time empOffTime
		FROM commute c
		LEFT OUTER JOIN emp_info e ON c.emp_no = e.emp_no
		LEFT OUTER JOIN account_list al ON e.emp_no = al.emp_no
		INNER JOIN common_code dc ON e.dept = dc.code
		WHERE
			1=1
			AND al.active = 'A0101'
			<if test="empNo !=null and empNo != 0">
		    	AND e.emp_no = #{empNo}
		    </if>
		 	<if test="empName != null and empName != ''">
		    	AND e.emp_name = #{empName}
		    </if>
		    <if test="dept != null and dept != ''">
		     	AND dc.code = #{dept}
		    </if>
		    <if test="year != null and year != ''">
		    	AND YEAR(c.emp_on_off_date) = #{year}
		    </if>
		    <if test="startDate != null and endDate != null 
		    			and startDate != '' and endDate != ''">
		    	AND c.emp_on_off_date BETWEEN #{startDate} AND #{endDate}
		    </if> 
		ORDER BY c.emp_on_off_date DESC, c.createdate DESC
		LIMIT #{beginRow}, #{rowPerPage}  
	</select>
	
	<!-- 사원별 연차 정보 조회 -->
	<select id="getEmpAnnualLeaveInfo"
			parameterType="int" resultType="java.util.Map">
		
		SELECT
			e.emp_no empNo, 
		    emp_name empName,
		    emp_hire_date empHireDate,
		    <![CDATA[
		    -- 근속일수
		    DATEDIFF(NOW(), emp_hire_date) + 1 - 
		    (2 * (FLOOR(DATEDIFF(NOW(), emp_hire_date) / 7) + 
		    CASE 
		        WHEN WEEKDAY(emp_hire_date) <= 4 THEN 1 
		        ELSE 0 
		    END)) workDays,
		    
		    -- 근속년수
		    YEAR(NOW()) - YEAR(emp_hire_date) - 
		    CASE 
		        WHEN MONTH(NOW()) < MONTH(emp_hire_date) OR 
		             (MONTH(NOW()) = MONTH(emp_hire_date) AND DAY(NOW()) < DAY(emp_hire_date)) 
		        THEN 1 
		        ELSE 0 
		    END workYears,
		    
		    -- 근속 개월수
		    MONTH(NOW()) - MONTH(emp_hire_date) + 
		    CASE 
		        WHEN MONTH(NOW()) < MONTH(emp_hire_date) OR 
		             (MONTH(NOW()) = MONTH(emp_hire_date) AND DAY(NOW()) < DAY(emp_hire_date)) 
		        THEN 12 
		        ELSE 0 
		    END workMonths,
		    ]]>
		    ( -- 첫 달 근로 시간
		        SELECT TIME_FORMAT(SEC_TO_TIME(SUM(TIME_TO_SEC(c.emp_off_time) - TIME_TO_SEC(c.emp_on_time))), '%H:%i:%s') 
		        FROM emp_info e2
		        LEFT OUTER JOIN commute c ON e2.emp_no = c.emp_no
		        WHERE 
		            c.emp_on_off_date BETWEEN e2.emp_hire_date AND DATE_ADD(e2.emp_hire_date, INTERVAL 1 MONTH)
		            AND e2.emp_no = e.emp_no
		        GROUP BY e2.emp_no
		    ) totalFirstMonthWorkTime,
		    
		    ( -- 한달 근로 시간
		        SELECT TIME_FORMAT(SEC_TO_TIME(SUM(TIME_TO_SEC(c.emp_off_time) - TIME_TO_SEC(c.emp_on_time))), '%H:%i:%s') 
		        FROM emp_info e3
		        LEFT OUTER JOIN commute c ON e3.emp_no = c.emp_no
		        WHERE 
		            c.emp_on_off_date BETWEEN 
		                (SELECT MAX(add_annual_date) FROM annual_leave) 
		                AND DATE_ADD((SELECT MAX(add_annual_date) FROM annual_leave), INTERVAL 1 MONTH)
		            AND e3.emp_no = e.emp_no
		        GROUP BY e3.emp_no
		    ) totalMonthWorkTime,
		    
		    ( -- 첫 해 1년 근로 시간
		        SELECT TIME_FORMAT(SEC_TO_TIME(SUM(TIME_TO_SEC(c.emp_off_time) - TIME_TO_SEC(c.emp_on_time))), '%H:%i:%s') 
		        FROM emp_info e4
		        LEFT OUTER JOIN commute c ON e4.emp_no = c.emp_no
		        WHERE 
		            c.emp_on_off_date BETWEEN e4.emp_hire_date AND DATE_ADD(e4.emp_hire_date, INTERVAL 1 YEAR)
		            AND e4.emp_no = e.emp_no
		        GROUP BY e4.emp_no
		    ) totalFristYearWorkTime,
		    
		    ( -- 1년 근로 시간
		        SELECT TIME_FORMAT(SEC_TO_TIME(SUM(TIME_TO_SEC(c.emp_off_time) - TIME_TO_SEC(c.emp_on_time))), '%H:%i:%s') 
		        FROM emp_info e5
		        LEFT OUTER JOIN commute c ON e5.emp_no = c.emp_no
		        WHERE 
		            c.emp_on_off_date BETWEEN 
		                (SELECT MAX(add_annual_date) FROM annual_leave) 
		                AND DATE_ADD((SELECT MAX(add_annual_date) FROM annual_leave), INTERVAL 1 YEAR)
		            AND e5.emp_no = e.emp_no
		        GROUP BY e5.emp_no
		    ) totalYearWorkTime,
		     
		    ( -- 첫 달 평일 근로 소정 시간
			    SELECT 
			        TIME_FORMAT(
			            SEC_TO_TIME(
			                (DATEDIFF(
			                    DATE_ADD(e.emp_hire_date, INTERVAL 1 MONTH),  
			                    e.emp_hire_date  -- 입사일
			                ) - (DATEDIFF(
			                    DATE_ADD(e.emp_hire_date, INTERVAL 1 MONTH),  
			                    e.emp_hire_date  
			                ) DIV 7 * 2)) * 3600 * 8
			            ), '%H:%i:%s'
			        ) workTimeInOneFirstMonth
			) workTimeInOneFirstMonth,
		    
		    ( -- 1달 평일 근로 소정 시간
		        
		        SELECT 
		            TIME_FORMAT(
							SEC_TO_TIME(
			                (DATEDIFF(
			                    DATE_ADD(
			                        (SELECT MAX(add_annual_date) FROM annual_leave WHERE emp_no = e.emp_no),
			                        INTERVAL 1 MONTH
			                    ),
			                    (SELECT MAX(add_annual_date) FROM annual_leave WHERE emp_no = e.emp_no) 
			                ) - (DATEDIFF(
			                    DATE_ADD(
			                        (SELECT MAX(add_annual_date) FROM annual_leave WHERE emp_no = e.emp_no),
			                        INTERVAL 1 MONTH
			                    ), 
			                    (SELECT MAX(add_annual_date) FROM annual_leave WHERE emp_no = e.emp_no)  
			                ) DIV 7 * 2)) * 3600 * 8
		                ), '%H:%i:%s'
		            ) workTimeInOneMonth
		    ) workTimeInOneMonth,
		    
			( -- 1년 평일 근로 소정 시간
		    SELECT 
		        TIME_FORMAT(
					  SEC_TO_TIME(
				          (DATEDIFF(
				              DATE_ADD(e.emp_hire_date, INTERVAL 1 YEAR), 
				              e.emp_hire_date 
				          ) - (DATEDIFF(
				              DATE_ADD(e.emp_hire_date, INTERVAL 1 YEAR), 
				              e.emp_hire_date  
				          ) DIV 7 * 2)) * 3600 * 8
						 ), '%H:%i:%s'            
		        ) workTimeInYear
			) workTimeInYear,
			
			-- 입사한지 한 달 후의 날짜
		    DATE_ADD(e.emp_hire_date, INTERVAL 1 MONTH) oneMonthAfterHireDate,
		    
		    -- 마지막 연차 지급일 부터의 한 달 후의 날짜
		    DATE_ADD(al.add_annual_date, INTERVAL 1 MONTH) oneMonthAfterAddAnnualDate,
		    
		    -- 입사한지 1년 후의 날짜
		    DATE_ADD(e.emp_hire_date, INTERVAL 1 YEAR) oneYearAfterHireDate,
		    
		    -- 마지막 연차 지급일 부터의 1년 후의 날짜
		    DATE_ADD(al.add_annual_date, INTERVAL 1 YEAR) oneYearAfterAddAnnualDate		
		FROM 
		    emp_info e
		    LEFT OUTER JOIN annual_leave al ON e.emp_no = al.emp_no
			LEFT OUTER JOIN account_list alist ON e.emp_no = alist.emp_no
		WHERE 
			e.emp_no = #{empNo}
		GROUP BY e.emp_no 		
	</select>
	
	<!-- 발생연차, 사용연차, 잔여연차 조회 -->
	<select id="getAnnualLeaveCnt">
		SELECT 
			COALESCE(SUM(add_annual_count), 0) addAnnualConut, -- 발생연차
			COALESCE(SUM(take_annual_count), 0) takeAnnualCount, -- 사용연차
			COALESCE(SUM(add_annual_count), 0) - COALESCE(SUM(take_annual_count), 0) annualCount -- 잔여연차
		FROM annual_leave
		WHERE emp_no = #{empNo}	
		GROUP BY e.emp_no 
	</select>
	
	<!-- 사원별 연차 테이블 count 조회 -->
	<select id="getEmpAnnualLeaveCnt" resultType="java.lang.Integer">
		SELECT 
			IFNULL(COUNT(annual_leave.emp_no), 0)
		FROM annual_leave
		LEFT JOIN (SELECT DISTINCT emp_no FROM annual_leave) emp
		ON annual_leave.emp_no = emp.emp_no
		WHERE annual_leave.emp_no = #{empNo};
	</select>
	
	<!-- 연가 사용 입력 -->
	<insert id="addLeaveRecode">
		INSERT INTO leave_recode (
			emp_no, 
			doc_no, 
			leave_start_date, 
			leave_end_date, 
			leave_period_date, 
			leave_type, 
			createdate, 
			updatedate, 
			create_id, 
			update_id
			)
		VALUES (
			#{docEmpNo},
			#{docNo},
			#{leaveStartDate},
			#{leaveEndDate},
			#{leavePeriodDate},
			#{leaveType},
			NOW(),
			NOW(),
			#{empNo},
			#{empNo}
		)
	</insert>
	
	<!-- 발생연차 등록 -->
	<insert id="addAnnualLeave" parameterType="java.util.Map">
		INSERT INTO annual_leave (
			emp_no, 
			add_annual_count,
			take_annual_count,
			add_annual_date,
			createdate, 
			updatedate, 
			create_id, 
			update_id
			)
		VALUES (
			#{docEmpNo},
			#{addAnnualCount},
			#{docLeavePeriodDate},
			#{addAnnualDate},
			NOW(),
			NOW(),
			#{empNo}, -- 생성자
			#{empNo} -- 수정자
		)
	</insert>

</mapper>